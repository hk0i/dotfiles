#!/usr/bin/env python3

import sys

from swiftpy.core import find_indentation


def main(string):
    print(chomp(string))


def chomp_basic(string, indent_spaces=4, max_level=1):
    """
    Chomps parameters lists to one per line.
    """

    output = ""
    base_indentation = ""
    one_indent = ' ' * indent_spaces

    for line in string:
        if not output:
            base_indentation = find_indentation(line)

        buffer = ""
        level = 0
        for char in line:

            if char == '(':
                buffer += char
                level += 1

                if level <= max_level:
                    output += buffer
                    buffer = ""

                    output += f'\n{base_indentation}'
                    output += one_indent * level

            elif char == ',' and level <= max_level:
                buffer += char
                output += f'{buffer}\n{base_indentation}' + (one_indent * level)
                buffer = ""

            elif char == ')':
                level -= 1

                if level == 0:
                    output += f'{buffer}\n{base_indentation})'
                    buffer = ''
                else:
                    buffer += char

            else:
                buffer += char

        output += buffer.lstrip()


    return output.rstrip()


def chomp(string):
    """
    Chomps parameters lists to one per line.
    """

    output = ""
    indentation = ""
    is_last = False

    for line in string:
        if not output:
            indentation = find_indentation(line)
            indentation_2 = indentation + '    ' if len(indentation) > 1 else '    '

        chomped = line.split(',')
        for index, component in enumerate(chomped):
            if not output:
                parts = component.split('(')
                if len(parts) > 1:
                    output += f'{indentation}{parts[0].strip()}(\n'
                    component = parts[1]

            if index == len(chomped) - 1:
                parts = component.split(')')
                if len(parts) > 1:
                    output += f'{indentation_2}{parts[0].strip()}\n{indentation}) '
                    component = parts[1].strip()
                    indentation_2 = indentation
                    is_last = True

            if not is_last:
                output += indentation_2
            output += f'{component.strip()}'
            if not is_last:
                output += ','
            output += '\n'

    return output.rstrip()


if __name__ == '__main__':
    main(sys.stdin)

