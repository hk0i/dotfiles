#!/usr/bin/env python3

import sys
from swiftpy.core import find_indentation, find_parameters, find_function_name, indent

# TODO:
# - capture return values `-> whatever` and output those too.
# - chomping fails when types are subtypes like `ImageViewPresenter.Content`
# - chomping fails when types have default values: `someParam: Bool = true`
# - chomping fails when types are optional: `someParam: String?`
# - chomping fails when preceded by an argument label:
#     someFunc(
#       someArg: ButThis(needs: toBe, chomped: onDown)
#     )

def chomp(string):
    """
    Chomps parameters lists to one per line.
    Still needs to capture '{', capture list, etc. (funky with funcs)
    """
    output = ""
    indentation = ""
    function_name = ""

    for line in string:
        if not output:
            # is first line
            indentation = find_indentation(line)

        function_name = find_function_name(line)
        if function_name and function_name.group(1):
            print(
                function_name.group(1) + '(',
            )


        indent_length = len(indentation)
        next_indent = indent_length * 2
        if indent_length == 0:
            next_indent = 2

        parameters = find_parameters(line)
        print(',\n'.join(f'{" " * next_indent}{param}' for param in parameters))
        if parameters:
            print(indent(')', default_size = indent_length))


def main(string):
    chomp(string)

if __name__ == '__main__':
    main(sys.stdin)

